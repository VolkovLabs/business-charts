{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": 22,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 6,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none",
          "unitScale": true
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "asc"
        }
      },
      "targets": [
        {
          "channel": "plugin/testdata/random-2s-stream",
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Panel Title",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unitScale": true
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 3,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Panel Title",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "id": 4,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let series;\nlet data;\n\nconst subscription = context.grafana.eventBus.subscribe({ type: 'data-hover' }, (data) => {\n\n  if (data?.origin?.path[0] !== 'echarts-walk-1') {\n\n    const options = context.panel.chart.getOption()\n    const series = options.series\n    const newSeries = series.map(s => ({\n      ...s,\n      markLine: {\n        data: [\n          {\n            xAxis: data.payload?.point?.time || 0\n          }\n        ],\n        label: {\n          show: false\n        },\n        symbol: [\n          \"none\",\n          \"none\"\n        ]\n      }\n    }))\n\n    context.panel.chart.setOption({\n      ...options,\n      series: newSeries,\n      markLine: [{\n        animationEasing: \"linear\",\n        animation: false,\n        lineStyle: {\n          type: \"dashed\"\n        },\n        symbolOffset: 0,\n        label: {\n          show: false\n        },\n        symbol: [\n          \"none\",\n          \"none\"\n        ]\n      }]\n    })\n  }\n  if (data?.origin?.path[0] === 'echarts-walk-1') {\n\n    const options = context.panel.chart.getOption()\n    const series = options.series\n    const newSeries = series.map(s => ({\n      ...s,\n      markLine: {\n        data: [\n          {\n            xAxis: 0\n          }\n        ],\n        label: {\n          show: false\n        },\n        symbol: [\n          \"none\",\n          \"none\"\n        ]\n      }\n    }))\n\n    context.panel.chart.setOption({\n      ...options,\n      series: newSeries,\n      markLine: []\n    })\n\n  }\n})\n\n\nseries = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n\n  return {\n    name: s.refId,\n    type: 'line',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n  };\n});\n\n\ndata = context.panel.data.series.map((s) => s.refId)\n\ncontext.panel.chart.on('mousemove', function (params) {\n\n  context.grafana.eventBus.publish({\n    type: 'data-hover', payload: {\n      point: {\n        time: params.value[0]\n      }\n    },\n    origin: {\n      path: ['echarts-walk-1']\n    }\n  })\n});\n\n\n\n\n\nreturn {\n  version: 2,\n  config: { notMerge: true },\n  option: {\n    backgroundColor: 'transparent',\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross',\n        lineStyle: {\n          type: 'dashed',\n          width: 3\n        }\n      }\n    },\n    legend: {\n      left: '0',\n      bottom: '0',\n      data: data,\n      textStyle: {\n        color: 'rgba(128, 128, 128, .9)',\n      },\n    },\n    toolbox: {\n      feature: {\n        dataZoom: {\n          yAxisIndex: 'none',\n          icon: {\n            zoom: 'path://',\n            back: 'path://',\n          },\n        },\n        saveAsImage: {},\n      }\n    },\n    xAxis: {\n      type: 'time',\n      axisTick: {\n        inside: true\n      }\n    },\n    yAxis: {\n      type: 'value',\n      min: 'dataMin',\n      axisTick: {\n        inside: true\n      }\n    },\n    grid: {\n      left: '2%',\n      right: '2%',\n      top: '2%',\n      bottom: 24,\n      containLabel: true,\n    },\n    series,\n  },\n  unsubscribe: () => {\n    subscription.unsubscribe();\n    console.log('Unsubscribed');\n  }\n}\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "title": "Random Walk 1",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 10
      },
      "id": 5,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let series;\nlet data;\n\nconst subscription = context.grafana.eventBus.subscribe({ type: 'data-hover' }, (data) => {\n\n\n  if (data?.origin?.path[0] !== 'echarts-walk-2') {\n\n    const options = context.panel.chart.getOption()\n    const series = options.series\n    const newSeries = series.map(s => ({\n      ...s,\n      markLine: {\n        data: [\n          {\n            xAxis: data.payload?.point?.time || 0\n          }\n        ],\n        label: {\n          show: false\n        },\n        symbol: [\n          \"none\",\n          \"none\"\n        ]\n      }\n    }))\n\n    context.panel.chart.setOption({\n      ...options,\n      series: newSeries,\n      markLine: [{\n        animationEasing: \"linear\",\n        animation: false,\n        lineStyle: {\n          type: \"dashed\"\n        },\n        symbolOffset: 0,\n        label: {\n          show: false\n        },\n        symbol: [\n          \"none\",\n          \"none\"\n        ]\n      }]\n    })\n  }\n  if (data?.origin?.path[0] === 'echarts-walk-2') {\n\n    const options = context.panel.chart.getOption()\n\n    const series = options.series\n    const newSeries = series.map(s => ({\n      ...s,\n      markLine: {\n        data: [\n          {\n            xAxis: 0\n          }\n        ],\n        label: {\n          show: false\n        },\n        symbol: [\n          \"none\",\n          \"none\"\n        ]\n      }\n    }))\n\n    context.panel.chart.setOption({\n      ...options,\n      series: newSeries,\n      markLine: []\n    })\n\n  }\n})\n\n\nseries = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n\n  return {\n    name: s.refId,\n    type: 'line',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n  };\n});\n\n\ndata = context.panel.data.series.map((s) => s.refId)\n\ncontext.panel.chart.on('mousemove', function (params) {\n  context.grafana.eventBus.publish({\n    type: 'data-hover', payload: {\n      point: {\n        time: params.value[0]\n      }\n    },\n    origin: {\n      path: ['echarts-walk-2']\n    }\n  })\n});\n\n\nreturn {\n  version: 2,\n  config: { notMerge: true },\n  option: {\n    backgroundColor: 'transparent',\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross',\n        lineStyle: {\n          type: 'dashed',\n          width: 3\n        }\n      }\n    },\n    legend: {\n      left: '0',\n      bottom: '0',\n      data: data,\n      textStyle: {\n        color: 'rgba(128, 128, 128, .9)',\n      },\n    },\n    toolbox: {\n      feature: {\n        dataZoom: {\n          yAxisIndex: 'none',\n          icon: {\n            zoom: 'path://',\n            back: 'path://',\n          },\n        },\n        saveAsImage: {},\n      }\n    },\n    xAxis: {\n      type: 'time',\n      axisTick: {\n        inside: true\n      }\n    },\n    yAxis: {\n      type: 'value',\n      min: 'dataMin',\n      axisTick: {\n        inside: true\n      }\n    },\n    grid: {\n      left: '2%',\n      right: '2%',\n      top: '2%',\n      bottom: 24,\n      containLabel: true,\n    },\n    series,\n  },\n  unsubscribe: () => {\n    subscription.unsubscribe();\n    console.log('Unsubscribed');\n  }\n}\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "title": "Random Walk 2",
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Events",
  "uid": "fe7ebc17-cddf-4a1d-8e29-a42cf3eaded1",
  "version": 2,
  "weekStart": ""
}
