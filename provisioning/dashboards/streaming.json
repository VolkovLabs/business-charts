{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n\n  return {\n    name: s.refId,\n    type: 'line',\n    name: 'Live',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n  };\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 24,\n    containLabel: true,\n  },\n  series,\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "targets": [
        {
          "channel": "plugin/testdata/random-2s-stream",
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "filter": {
            "fields": ["Time", "Value"]
          },
          "queryType": "measurements",
          "refId": "A"
        }
      ],
      "title": "Grafana Live",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 17,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 5,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let sData = []\nconst series = context.panel.data.series.map((s) => {\n  sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n});\n\nreturn {\n  version: 2,\n  config: { notMerge: true },\n  option: {\n    tooltip: {\n      formatter: '{a} <br/>{b} : {c}%'\n    },\n    series: [\n      {\n        name: 'Pressure',\n        type: 'gauge',\n        detail: {\n          formatter: '{value}'\n        },\n        data: [\n          {\n            value: Math.round(sData[sData.length - 1] * 100) / 100,\n            name: 'SCORE'\n          }\n        ]\n      }\n    ]\n  },\n  unsubscribe: () => {\n    console.log('unsubscribeFunction')\n  }\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "targets": [
        {
          "channel": "plugin/testdata/random-2s-stream",
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "filter": {
            "fields": ["Value"]
          },
          "queryType": "measurements",
          "refId": "A"
        }
      ],
      "title": "Real-Time updates",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "golioth-websocket-datasource",
        "uid": "LWj8ert4k"
      },
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 2,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const values = {}\nconst series = context.panel.data.series.map((s) => {\n  names = s.fields.find((f) => f.name === 'name').values.buffer || s.fields.find((f) => f.name === 'name').values;\n  amounts = s.fields.find((f) => f.name === 'amount').values.buffer || s.fields.find((f) => f.name === 'amount').values;\n\n  names.forEach((d, i) => values[d] = amounts[i]);\n});\n\nreturn {\n  grid: {\n    bottom: \"3%\",\n    containLabel: true,\n    left: \"3%\",\n    right: \"4%\",\n    top: \"4%\",\n  },\n  animation: false,\n  tooltip: {},\n  xAxis: {\n    data: Object.keys(values)\n  },\n  yAxis: {},\n  series: [\n    {\n      name: 'Streaming',\n      type: 'bar',\n      data: Object.values(values)\n    }\n  ]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "datasource": {
            "type": "golioth-websocket-datasource",
            "uid": "LWj8ert4k"
          },
          "fields": [
            {
              "jsonPath": "$[*].name",
              "language": "jsonpath",
              "name": "",
              "type": "string"
            },
            {
              "jsonPath": "$[*].amount",
              "language": "jsonpath",
              "name": ""
            }
          ],
          "path": "/",
          "refId": "A",
          "withStreaming": true
        }
      ],
      "title": "WebSocket API",
      "transformations": [],
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Streaming (Websocket, Live)",
  "uid": "m7BQe9pVk",
  "version": 1,
  "weekStart": ""
}
